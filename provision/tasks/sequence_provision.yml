# tasks file for provision
# By searching for only these machines we allow for subsequently numbered machines to be provisioned.
# ie worker[0:2] may already be provisioned we can run role again with non colliding range worker[3:6]
- name: <Multiple Machines> Construct query to search for any of the machines in sequence
  set_fact:
     search_pattern: "{{ search_pattern | default([]) + [hostname_pattern] }}"
  vars:
    hostname_pattern:  " or name={{ hostname_prefix[0] + (item) | string + '.' + cluster_name + '.' + domain_name }}"
  with_sequence: start="{{ sequence_start + 1 }}" end="{{ sequence_end }}" format="%01d"

- name: <Multiple Machines> Check if any of the machine names overlap with already existing machines
  ovirt_vm_facts:
    auth: "{{ ovirt_auth }}"
    pattern: "{{ hostname_prefix[0] }}{{ sequence_start }} {{ search_pattern | join(' ') }}"

- name: <Multiple Machines> Reset the search_pattern fact ready for next run
  set_fact:
    search_pattern: []

- name: <Multiple Machines> Set fact with machine existence
  set_fact:
    machine_exists: "{{ ovirt_vms | length > 0 }}"

- block:
  - name: <Multiple Machines> Asynchronously create the disks wait for them to finish
    include_tasks: create_disk_async.yml

  - name: <Multiple Machines> Asynchronously create machines and move on
    include_tasks: create_rhcos_async.yml

  - name: <Multiple Machines> Write DNS entries into dnsmasq hosts file
    include_tasks: write_dns_entries.yml

  - name: <Multiple Machines> Remove the kernel boot parameters from the newly created machine
    ovirt_vm:
      auth: "{{ ovirt_auth }}"
      cluster: "Cluster01"
      name: "{{ hostname_prefix[0] }}{{ item }}.{{ cluster_name }}.{{ domain_name }}"
      state: running
      type: server
      wait: no
      kernel_path: ""
      initrd_path: ""
      kernel_params: ""
      kernel_params_persist: yes
    with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="%01d"
  when: not machine_exists | bool




