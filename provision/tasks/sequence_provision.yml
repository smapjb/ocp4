# tasks file for provision
- name: Asynchronously create the disks wait for them to finish
  include_tasks: create_disk_async.yml
  vars:
    disk_size: 40

- name: Asynchronously create machines and move on
  include_tasks: create_rhcos_async.yml

- name: Get all the info including the mac addrs
  ovirt_vm_facts:
    auth: "{{ ovirt_auth }}"
    pattern: "name={{ hostname_prefix[0] }}*.{{ cluster_name }}.{{ domain_name }}"
    fetch_nested: true
    nested_attributes: mac
  until: (ovirt_vms | length) > 0 and (ovirt_vms | first | json_query(query))
  retries: 5
  delay: 2
  vars:
    query: "nics[*].mac.address"

- name: Check that the address has been given out
  uri:
    url: "https://{{ gateway }}:81/api/v1/dhcp/leases"
    return_content: yes
    headers:
       x-api-key: "{{ apikey }}"
  until: (leases.json.data | dict2items | json_query(query) | length) > 0
  retries: 10
  delay: 5
  vars:
    query: "[].{mac: value.mac ipv4: value.ip}[?mac == '{{ ovirt_vms[item|int].nics[0].mac.address }}'].ipv4"
  with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="%01d"
  register: leases

- name: Get DHCP leases from the ClearOS Gateway API
  uri:
    url: "https://{{ gateway }}:81/api/v1/dhcp/leases"
    return_content: yes
    headers:
       x-api-key: "{{ apikey }}"
  register: leases

- name: Print out the object that we have
  debug:
    msg: "{{ ovirt_vms[item|int].name }} and {{ ovirt_vms[item|int].nics[0].mac.address }}"
    verbosity: 1
  with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="%01d"

- name: Collect the hostnames together into a dictionary
  set_fact:
    hosts_file: "{{ hosts_file | default({}) | combine({ hostname_key: hosts_file[hostname_key] | default([]) + [ hostname_value ]  }) }}"
  with_nested:
   - "{{ range( sequence_start | int, ( sequence_end + 1 )) | list }}"
   - "{{ hostname_prefix }}"
  vars:
    hostname_suffix: "{{ (item.0) | string + '.' + cluster_name + '.' + domain_name }}"
    hostname_key:  "{{ hostname_prefix[0] + hostname_suffix }}"
    hostname_value: "{{ item.1 + hostname_suffix }}"

- name: Add the hosts file line to the ClearOS Gateway
  lineinfile:
    line: "{{ rhcos_iface_address[0] }} {{ hosts_file[machine_name] | join(' ') }}"
    dest: /etc/hosts
    state: present
  remote_user: root
  delegate_to: "{{ gateway }}"
  # By querying the ovirt_vms object we are sure to line up IP, Mac and Name
  vars:
    query: "[].{mac: value.mac ipv4: value.ip}[?mac == '{{ ovirt_vms[item|int].nics[0].mac.address }}'].ipv4"
    machine_name: "{{ ovirt_vms[item|int].name }}"
    rhcos_iface_address: "{{ leases.json.data | dict2items | json_query(query)}}"
  with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="%01d"
#
#    - name: Re-initialise the hosts variable ready for the next run
#      set_fact:
#        the_line: []
#

- name: Restart dnsmasq on ClearOS Gateway to make sure the added host is picked up in DNS
  systemd:
    name: dnsmasq
    state: restarted
  remote_user: root
  delegate_to: "{{ gateway }}"

- name: Remove the kernel boot parameters from the newly created machine
  ovirt_vm:
    auth: "{{ ovirt_auth }}"
    cluster: "Cluster01"
    name: "{{ hostname_prefix[0] }}{{ item }}.{{ cluster_name }}.{{ domain_name }}"
    state: running
    type: server
    wait: no
    kernel_path: ""
    initrd_path: ""
    kernel_params: ""
    kernel_params_persist: yes
  with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="%01d"


# at this stage the host should be created so make sure it is in the inventory
- name: Add the new hosts into the in memory inventory for use in haproxy configuration
  add_host:
    name: "{{ hostname_prefix[0] }}{{ item }}.{{ cluster_name }}.{{ domain_name }}"
    groups: "{{ node_type }}"
  with_sequence: start="{{ sequence_start }}" end="{{ sequence_end }}" format="%01d"

